-> Nomeclaturas:

    * nomeclatura de variáveis: nome_da_variavel
    * nomeclatura de classes: Nome_da_classe
    * nomeclatura de funções: nome_da_funcao
    * nomeclatura de métodos: nome_do_metodo
    * nomeclatura de constantes: const_nome_da_constante
    * nomeclatura de topicos ros: nome_do_topico
    * nomeclatura de arquivos: nome_do_arquivo.py

    -> Protocolo de comunicação app -> raspberry:

        * Padrão: 0*speed$(value)*steer$(value)*limit$(value)*powerA$(value)*powerB$(value)*pulverize$(value)
        * '*' É utilizado como separador de variáveis.
        * '$' É utilizado como separador do nome da variável para o valor da variável.
        * Não existe ordem para as variáveis, é necessário identificar qual ela é pelo seu nome.
        * O valor 0* no início da mensagem era utilizado antigamente para definir a prioridade, teoricamente não é mais necessário, mas ainda não foi testado.

    -> Protocolo de comunicação interna pelo ROS:

        * Padrão: variable_value$variable_2_value$variable_3_value$variable_4_value
        * As variáveis devem estar ordenada na ordem correta. Cada variável é acessada diretamente pela sua posição no vetor.(Utilizado para otimizar o processamento)

-> Comentários:

    * ##: Comentário que vai para a documentação externa ao código.
    * #: Documentação interna do código.
    * ## : Comentário de múltiplas linhas para documentação externa.
      # ... \n
      #
    * # : Comentário de múltiplas linhas para documentação interna. 
      #
      #

-> Regras gerais:

    * Somente utilizar variáveis globais para constantes.
    * Caso o arquivo não contenha alguma das estruturas definidas abaixo, não colocar os Comentários
      que indicam a estrutura. Ex: # -> Imports <- #

-> Formatação do arquivo:

    #!/usr/bin/env python3

    """
    Descrição do que faz o arquivo.
    """

    # ------------- #
    # -> Imports <- #
    # ------------- #

    import x,y,z,w,k,a,b,c,d ...
    from blabla import blablala
    from blablabla, import bla

    # ---------------- #
    # -> Constantes <- #
    # ---------------- #

    const_bla = bla

    # ------------------- #
    # -> Configurações <- #
    # ------------------- #

    bla.setWarnings(True)
    ble.start()

    # -------------------------- #
    # -> Imports Condicionais <- #
    # -------------------------- #

    try:
        import bla
    except:
        blaa

    try:
        from blabla import bla
    except:
        blaa

    # ------------- #
    # -> Funções <- #
    # ------------- #

    def func(): ...

    # ------------- #
    # -> Classes <- #
    # ------------- #

    class Bla(): ...

    # ------------------------ #
    # -> Execução de código <- #
    # ------------------------ #

    bla = Bla()
    bla.blablabla()